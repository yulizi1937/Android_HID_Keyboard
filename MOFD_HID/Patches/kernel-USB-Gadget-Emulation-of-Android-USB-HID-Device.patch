From fe5142e0afbb984eb154f07fb3dea2c5861217d9 Mon Sep 17 00:00:00 2001
From: yadongqi <yadong.qi@intel.com>
Date: Wed, 2 Jul 2014 12:13:07 +0800
Subject: [PATCH] USB Gadget: Emulation of Android USB HID Device

Change-Id: Ifcbeea24cbfbd489d54c89c8828c16c71be38845
---
 drivers/usb/gadget/Makefile         |    2 +-
 drivers/usb/gadget/android.c        |   38 +++++++++++++++++++++++++++++
 drivers/usb/gadget/f_hid.c          |   11 ++++++---
 drivers/usb/gadget/f_hid.h          |   15 ++++++++++++
 drivers/usb/gadget/f_hid_keyboard.c |   46 +++++++++++++++++++++++++++++++++++
 5 files changed, 107 insertions(+), 5 deletions(-)
 create mode 100644 drivers/usb/gadget/f_hid.h
 create mode 100644 drivers/usb/gadget/f_hid_keyboard.c

diff --git a/drivers/usb/gadget/Makefile b/drivers/usb/gadget/Makefile
index 0c719e6..aee4321 100644
--- a/drivers/usb/gadget/Makefile
+++ b/drivers/usb/gadget/Makefile
@@ -66,7 +66,7 @@ g_nokia-y			:= nokia.o
 g_webcam-y			:= webcam.o
 g_ncm-y				:= ncm.o
 g_acm_ms-y			:= acm_ms.o
-g_android-y			:= android.o
+g_android-y			:= android.o f_hid.o
 g_tcm_usb_gadget-y		:= tcm_usb_gadget.o
 
 obj-$(CONFIG_USB_ZERO)		+= g_zero.o
diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index 3d2851e..64edebd 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -41,6 +41,8 @@
 #include "u_ether.c"
 #include "f_dvc_dfx.c"
 #include "f_dvc_trace.c"
+#include "f_hid.h"
+#include "f_hid_keyboard.c"
 
 MODULE_AUTHOR("Mike Lockwood");
 MODULE_DESCRIPTION("Android Composite USB Driver");
@@ -947,6 +949,35 @@ static struct android_usb_function audio_source_function = {
 	.attributes	= audio_source_function_attributes,
 };
 
+static int hid_function_init(struct android_usb_function *f, struct usb_composite_dev *cdev)
+{
+	return ghid_setup(cdev->gadget, 2);
+}
+
+static void hid_function_cleanup(struct android_usb_function *f)
+{
+	ghid_cleanup();
+}
+
+static int hid_function_bind_config(struct android_usb_function *f, struct usb_configuration *c)
+{
+	int ret;
+	printk(KERN_INFO "hid keyboard\n");
+	ret = hidg_bind_config(c, &ghid_device_android_keyboard, 0);
+	if (ret) {
+		pr_info("%s: hid_function_bind_config keyboard failed: %d\n", __func__, ret);
+		return ret;
+	}
+	return 0;
+}
+
+static struct android_usb_function hid_function = {
+	.name			= "hid",
+	.init			= hid_function_init,
+	.cleanup		= hid_function_cleanup,
+	.bind_config	= hid_function_bind_config,
+};
+
 
 struct dvcdfx_function_config {
 	bool	enabled;
@@ -1257,6 +1288,7 @@ static struct android_usb_function *supported_functions[] = {
 	&mass_storage_function,
 	&accessory_function,
 	&audio_source_function,
+	&hid_function,
 	&dvcdfx_function,
 	&dvctrace_function,
 	NULL
@@ -1407,6 +1439,7 @@ functions_store(struct device *pdev, struct device_attribute *attr,
 	int err;
 	int is_ffs;
 	int ffs_enabled = 0;
+	int hid_enabled = 0;
 
 	mutex_lock(&dev->mutex);
 
@@ -1463,6 +1496,11 @@ functions_store(struct device *pdev, struct device_attribute *attr,
 							   name, err);
 	}
 
+	err = android_enable_function(dev, "hid");
+	if (err)
+		pr_err("android_usb: Cannot enable '%s' (%d)",
+							   "hid", err);
+
 	mutex_unlock(&dev->mutex);
 
 	return size;
diff --git a/drivers/usb/gadget/f_hid.c b/drivers/usb/gadget/f_hid.c
index 6e69a8e..a8b7489 100644
--- a/drivers/usb/gadget/f_hid.c
+++ b/drivers/usb/gadget/f_hid.c
@@ -20,6 +20,8 @@
 #include <linux/sched.h>
 #include <linux/usb/g_hid.h>
 
+#include "f_hid.h"
+
 static int major, minors;
 static struct class *hidg_class;
 
@@ -301,6 +303,7 @@ static unsigned int f_hidg_poll(struct file *file, poll_table *wait)
 	unsigned int	ret = 0;
 
 	poll_wait(file, &hidg->read_queue, wait);
+
 	poll_wait(file, &hidg->write_queue, wait);
 
 	if (WRITE_COND)
@@ -560,7 +563,7 @@ const struct file_operations f_hidg_fops = {
 	.llseek		= noop_llseek,
 };
 
-static int __init hidg_bind(struct usb_configuration *c, struct usb_function *f)
+static int hidg_bind(struct usb_configuration *c, struct usb_function *f)
 {
 	struct usb_ep		*ep;
 	struct f_hidg		*hidg = func_to_hidg(f);
@@ -656,7 +659,7 @@ static void hidg_unbind(struct usb_configuration *c, struct usb_function *f)
 
 	/* disable/free request and end point */
 	usb_ep_disable(hidg->in_ep);
-	usb_ep_dequeue(hidg->in_ep, hidg->req);
+	//usb_ep_dequeue(hidg->in_ep, hidg->req);
 	kfree(hidg->req->buf);
 	usb_ep_free_request(hidg->in_ep, hidg->req);
 
@@ -689,7 +692,7 @@ static struct usb_gadget_strings *ct_func_strings[] = {
 /*-------------------------------------------------------------------------*/
 /*                             usb_configuration                           */
 
-int __init hidg_bind_config(struct usb_configuration *c,
+int hidg_bind_config(struct usb_configuration *c,
 			    struct hidg_func_descriptor *fdesc, int index)
 {
 	struct f_hidg *hidg;
@@ -743,7 +746,7 @@ int __init hidg_bind_config(struct usb_configuration *c,
 	return status;
 }
 
-int __init ghid_setup(struct usb_gadget *g, int count)
+int ghid_setup(struct usb_gadget *g, int count)
 {
 	int status;
 	dev_t dev;
diff --git a/drivers/usb/gadget/f_hid.h b/drivers/usb/gadget/f_hid.h
new file mode 100644
index 0000000..49ed3ef
--- /dev/null
+++ b/drivers/usb/gadget/f_hid.h
@@ -0,0 +1,15 @@
+#ifndef _GADGET_F_HID_H
+#define _GADGET_F_HID_H
+
+#include <linux/hid.h>
+#include <linux/usb/composite.h>
+#include <linux/usb/gadget.h>
+#include <linux/usb/g_hid.h>
+
+int hidg_bind_config(struct usb_configuration *c, struct hidg_func_descriptor *fdesc, int index);
+
+int ghid_setup(struct usb_gadget *g, int count);
+
+void ghid_cleanup(void);
+
+#endif
diff --git a/drivers/usb/gadget/f_hid_keyboard.c b/drivers/usb/gadget/f_hid_keyboard.c
new file mode 100644
index 0000000..58a36e8
--- /dev/null
+++ b/drivers/usb/gadget/f_hid_keyboard.c
@@ -0,0 +1,46 @@
+#include <linux/platform_device.h>
+#include <linux/usb/g_hid.h>
+
+/* hid descriptor for a keyboard */
+static struct hidg_func_descriptor ghid_device_android_keyboard = {
+	.subclass				= 0,
+	.protocol				= 1,
+	.report_length			= 8,
+	.report_desc_length		= 63,
+	.report_desc			= {
+		0x05, 0x01,	/* USAGE_PAGE (Generic Desktop)			  */
+		0x09, 0x06,	/* USAGE (Keyboard)						  */
+		0xa1, 0x01,	/* COLLECTION (Application)               */
+		0x05, 0x07,	/*   USAGE_PAGE (Keyboard)                */
+		0x19, 0xe0,	/*   USAGE_MINIMUM (Keyboard LeftControl) */
+		0x29, 0xe7,	/*   USAGE_MAXIMUM (Keyboard Right GUI)   */
+		0x15, 0x00,	/*   LOGICAL_MINIMUM (0)                  */
+		0x25, 0x01,	/*   LOGICAL_MAXIMUM (1)                  */
+		0x75, 0x01,	/*   REPORT_SIZE (1)                      */
+		0x95, 0x08,	/*   REPORT_COUNT (8)                     */
+		0x81, 0x02,	/*   INPUT (Data,Var,Abs)                 */
+		0x95, 0x01,	/*   REPORT_COUNT (1)                     */
+		0x75, 0x08,	/*   REPORT_SIZE (8)                      */
+		0x81, 0x03,	/*   INPUT (Cnst,Var,Abs)                 */
+		0x95, 0x05,	/*   REPORT_COUNT (5)                     */
+		0x75, 0x01,	/*   REPORT_SIZE (1)                      */
+		0x05, 0x08,	/*   USAGE_PAGE (LEDs)                    */
+		0x19, 0x01,	/*   USAGE_MINIMUM (Num Lock)             */
+		0x29, 0x05,	/*   USAGE_MAXIMUM (Kana)                 */
+		0x91, 0x02,	/*   OUTPUT (Data,Var,Abs)                */
+		0x95, 0x01,	/*   REPORT_COUNT (1)                     */
+		0x75, 0x03,	/*   REPORT_SIZE (3)                      */
+		0x91, 0x03,	/*   OUTPUT (Cnst,Var,Abs)                */
+		0x95, 0x06,	/*   REPORT_COUNT (6)                     */
+		0x75, 0x08,	/*   REPORT_SIZE (8)                      */
+		0x15, 0x00,	/*   LOGICAL_MINIMUM (0)                  */
+		0x25, 0x65,	/*   LOGICAL_MAXIMUM (101)                */
+		0x05, 0x07,	/*   USAGE_PAGE (Keyboard)                */
+		0x19, 0x00,	/*   USAGE_MINIMUM (Reserved)             */
+		0x29, 0x65,	/*   USAGE_MAXIMUM (Keyboard Application) */
+		0x81, 0x00,	/*   INPUT (Data,Ary,Abs)                 */
+		0xc0		/* END_COLLECTION                         */
+	}
+};
+
+
-- 
1.7.9.5

